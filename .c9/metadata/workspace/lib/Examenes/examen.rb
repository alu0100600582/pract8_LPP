{"filter":false,"title":"examen.rb","tooltip":"/lib/Examenes/examen.rb","undoManager":{"mark":-1,"position":-1,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":58,"column":3},"action":"remove","lines":["# -*- coding: utf-8 -*-","require 'rubygems'","require 'bundler/setup'","require 'rspec'","","# = Modulo Examenes","#","# Probando RDOC","#","# === Clase ExamenCompleto","#","# Definición de la clase ExamenCompleto compuesta por","# * metodo initialize","# * metodo obtenerPreguntas","# * metodo establecerPreguntas","# * metodo obtenerSoluciones","# * metodo establecerSoluciones","# * metodo obtenerPregunta(numero)","","module Examenes","    ","  class ExamenCompleto","      ","    # Dos tipos de atributos, lista_preguntas y lista_soluciones.","    attr_reader :lista_preguntas, :lista_soluciones","    ","    # En el constructor incializamos los dos atributos.","    def initialize (preguntas, soluciones)","      @lista_preguntas = preguntas","      @lista_soluciones = soluciones","    end","","    # Getter de obtener preguntas","    def obtenerPreguntas","      return @lista_preguntas","    end","    ","    # Setter de las preguntas pasado por parámetros","    def establecerPreguntas(preguntas)","      @lista_preguntas = preguntas","    end","    ","    # Getter de obtener soluciones","    def obtenerSoluciones","      return @lista_soluciones","    end","    ","    # Setter de las soluciones pasado por parámetros","    def establecerSoluciones(soluciones)","      @lista_soluciones = soluciones","    end","    ","    # Obtiene un número determinado de preguntas","    def obtenerPregunta(numero)","      return @lista_preguntas.obtenerValor(numero).mostrar","    end","    ","  end","end"]},{"start":{"row":0,"column":0},"end":{"row":61,"column":3},"action":"insert","lines":["# -*- coding: utf-8 -*-","#Clase examen, que contiene una lista de preguntas","#y permite la realización de un exámen tipo test con las mismas.","class Examen","attr_reader :nota","#Constructor.","def initialize (lista)","lista.ordenar","@preguntas = lista","@nota = 0","#inicializamos un array con 0 elementos para las respuestas","end","#Método que devuelve el examen como un String.","def to_s","aux = @preguntas.head","respuesta = \"\"","respuesta += aux.value.to_s","respuesta += \"\\n\"","while (aux != @preguntas.tail) do","aux = aux.next","respuesta += aux.value.to_s","respuesta += \"\\n\"","end","respuesta","end","def inverso","respuesta = \"\"","@preguntas.reverse_each{|x,y| respuesta += \"#{x.value.to_s}\\n\"}","respuesta","end","#Método que permite la realización del exament de forma interactiva.","def hacer_examen","score = 0","@preguntas.each do |preg|","puts preg.to_s","resp = gets.chomp","this = preg.value.resp_correcta?(resp)","if (this == true)","score += 1","puts \"Respuesta correcta\"","else","puts \"Respuesta incorrecta\"","end","end","puts \"Puntuacion: \" + score","end","#Método que comprueba las respuestas tomando un Array de respuestas.","#Sirve para la comprobación no interactiva de las respuestas.","def hacer_examen(respuestas)","score = 0","contador = 0","@preguntas.each do |preg|","resp = respuestas[contador]","this = preg.value.resp_correcta?(resp)","if (this == true)","score += 1","end","contador += 1","end","return score","end","end"]}]}]]},"ace":{"folds":[],"scrolltop":240,"scrollleft":0,"selection":{"start":{"row":5,"column":19},"end":{"row":5,"column":19},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":431,"mode":"ace/mode/ruby"}},"timestamp":1418228665457,"hash":"45a6551dc9f7085a1b0464a0bfc3c88cca321d73"}