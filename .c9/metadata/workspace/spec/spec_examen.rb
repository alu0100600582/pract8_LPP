{"changed":true,"filter":false,"title":"spec_examen.rb","tooltip":"/spec/spec_examen.rb","value":"# -*- coding: utf-8 -*-\nrequire 'spec_helper'\nrequire './lib/Examenes.rb'\n\n\n\ndescribe Examenes::PreguntaSimple do\n  before :each do\n    @examen = Examenes::PreguntaSimple.new(\"¿De que color es el caballo blanco de santiago?\" , [ 'a) Rojo', 'b) Blanco', 'c) Azul' ])\n  end\n\n  describe \"# Existencia de pregunta\" do\n    it \"Existe una pregunta\" do\n      expect(@examen.pregunta).not_to be_empty\n      \n    end\n  end\n\n  describe \"# Existencia de respuestas\" do\n    it \"Existe mas de una respuesta\" do\n      expect(@examen.numero).to be > 1\n    end\n  end\n\n  describe \"# Obtener pregunta\" do\n    it \"Se obtiene una pregunta\" do\n      expect(@examen.pregunta).to match(/¿*^?/)\n      \n    end\n  end\n\n  describe \"# Obtener respuestas\" do\n    it \"Se obtienen las respuestas\" do\n      expect(@examen.obtenerRespuestas(0)).to match(/a\\) /)\n      expect(@examen.obtenerRespuestas(1)).to match(/b\\) /)\n      expect(@examen.obtenerRespuestas(2)).to match(/c\\) /)\n    end\n  end\n\n  describe \"# Mostrar resultado\" do\n    it \"Se muestra una pregunta seguida de sus respuestas\" do\n      expect(@examen.mostrar).to match(/\\?*\\?*a\\)*b\\)*c*\\)*/) \n    end\n  end\n\nend\n\n#-------------------------------------------------------------------------------\n\ndescribe Examenes::List do\n  before :each do\n    @lista = Examenes::List.new\n  end\n\n  describe \"# Debe existir un Nodo de la lista con sus datos y su siguiente List\" do\n    it \"Se comprueba que el valor de la cabeza es 1, se le enlaza el nodo y se comprueba que vale 2\" do\n      @lista.push(1)\n      expect(@lista.cabeza.value).to eq(1)\n      expect(@lista.cabeza.next).to be_nil\n    end\n  end\n\n  describe \"# Se extrae el primer elemento de la lista\" do\n    it \"Extraer Nodo de cabeza de lista y comprobar que la cabeza vale nil\" do\n      @lista.push(1)\n      expect(@lista.cabeza.value).to eq(1)\n      @lista.pop\n      expect(@lista.cabeza).to be_nil\n    end\n  end\n\n  describe \"# Se puede insertar un elemento\" do\n    it \"Se inserta un Nodo y se comprueba que vale 2\" do\n      expect(@lista.cabeza).to be_nil\n      @lista.push(2)\n      expect(@lista.cabeza.value).to eq(2)\n    end\n  end\n\n  describe \"# Se pueden insertar varios elementos\" do\n    it \"Se insertan varios nodos y se comprueban sus valores\" do\n      @lista.push(2,3,4)\n      expect(@lista.cabeza.value).to eq(4)\n      expect(@lista.cabeza.next.value).to eq(3)\n      expect(@lista.cabeza.next.next.value).to eq(2)\n    end\n  end\n\n  describe \"# Debe existir una lista con su cabeza\" do\n    it \"se muestra la cabeza y sus enlaces\" do\n      expect(@lista.cabeza).to be_nil\n    end\n  end\n\nend\n\n\n\n#-------------------------------------------------------------------------------------------------------\ndescribe Examenes::PreguntaSimple do\n  before :each do\n    @pregunta1 = Examenes::PreguntaSimple.new(\"¿Cual es la salida del siguiente codigo Ruby?/tclass Xyz/tdef pots/t@nice/tend/tend/txyz = Xyz.new/tp xyz.pots/t\" , [ 'a) #<Xyz:0xa000208>', 'b) nil', 'c) 0', 'd) Ninguna de las anteriores' ])\n    @pregunta2 = Examenes::PreguntaSimple.new(\"La siguiente definicion de un hash en Ruby es valida:/thash_raro = {/t[1, 2, 3] => Object.new(),/tHash.new => :toto/t}/t\" , [ 'a) Cierto', 'b) Falso'])\n    @pregunta3 = Examenes::PreguntaSimple.new('¿Cual es la salida del siguiente codigo Ruby?/tclass Array/tdef say_hi/t\"HEY!\"/t  end/t end/t /t p [1, \"bob\"].say_hi/t' , [ 'a) 1', 'b) bob', 'c) hey!' ,'d) Ninguna de las anteriores'])\n    @pregunta4 = Examenes::PreguntaSimple.new(\"¿Cual es el tipo del objeto en el siguiente codigo Ruby?/tclass Objeto/tend/t\" , [ 'a) Una instancia de la clase Class', 'b) Una constante', 'c) Un objeto' , 'd) Ninguna de las anteriores'])\n    @pregunta5 = Examenes::PreguntaSimple.new(\"Es apropiado que una clase Tablero herede de una clase Juego./t\" , [ 'a) Cierto', 'b) Falso'])\n\n    @lista_preguntas = Examenes::List.new\n    @lista_preguntas.push(@pregunta5,@pregunta4,@pregunta3,@pregunta2,@pregunta1)\n  end\n\n  it \"La preguntas y sus respuestas deben coincidir\" do\n    expect(@lista_preguntas.cabeza.value.pregunta).to eq(\"¿Cual es la salida del siguiente codigo Ruby?/tclass Xyz/tdef pots/t@nice/tend/tend/txyz = Xyz.new/tp xyz.pots/t\")\n    expect(@lista_preguntas.cabeza.value.obtenerRespuestas(0)).to eq('a) #<Xyz:0xa000208>')\n    expect(@lista_preguntas.cabeza.value.obtenerRespuestas(1)).to eq('b) nil')\n    expect(@lista_preguntas.cabeza.value.obtenerRespuestas(2)).to eq('c) 0')\n    expect(@lista_preguntas.cabeza.value.obtenerRespuestas(3)).to eq('d) Ninguna de las anteriores')\n\n    @lista_preguntas.pop\n    expect(@lista_preguntas.cabeza.value.pregunta).to eq(\"La siguiente definicion de un hash en Ruby es valida:/thash_raro = {/t[1, 2, 3] => Object.new(),/tHash.new => :toto/t}/t\")\n    expect(@lista_preguntas.cabeza.value.obtenerRespuestas(0)).to eq('a) Cierto')\n    expect(@lista_preguntas.cabeza.value.obtenerRespuestas(1)).to eq('b) Falso')\n\n    @lista_preguntas.pop\n    expect(@lista_preguntas.cabeza.value.pregunta).to eq('¿Cual es la salida del siguiente codigo Ruby?/tclass Array/tdef say_hi/t\"HEY!\"/t  end/t end/t /t p [1, \"bob\"].say_hi/t')\n    expect(@lista_preguntas.cabeza.value.obtenerRespuestas(0)).to eq('a) 1')\n    expect(@lista_preguntas.cabeza.value.obtenerRespuestas(1)).to eq('b) bob')\n    expect(@lista_preguntas.cabeza.value.obtenerRespuestas(2)).to eq('c) hey!')\n    expect(@lista_preguntas.cabeza.value.obtenerRespuestas(3)).to eq('d) Ninguna de las anteriores')\n\n    @lista_preguntas.pop\n    expect(@lista_preguntas.cabeza.value.pregunta).to eq(\"¿Cual es el tipo del objeto en el siguiente codigo Ruby?/tclass Objeto/tend/t\")\n    expect(@lista_preguntas.cabeza.value.obtenerRespuestas(0)).to eq('a) Una instancia de la clase Class')\n    expect(@lista_preguntas.cabeza.value.obtenerRespuestas(1)).to eq('b) Una constante')\n    expect(@lista_preguntas.cabeza.value.obtenerRespuestas(2)).to eq('c) Un objeto')\n    expect(@lista_preguntas.cabeza.value.obtenerRespuestas(3)).to eq('d) Ninguna de las anteriores')\n\n    @lista_preguntas.pop\n    expect(@lista_preguntas.cabeza.value.pregunta).to eq(\"Es apropiado que una clase Tablero herede de una clase Juego./t\")\n    expect(@lista_preguntas.cabeza.value.obtenerRespuestas(0)).to eq('a) Cierto')\n    expect(@lista_preguntas.cabeza.value.obtenerRespuestas(1)).to eq('b) Falso')\n  end\nend\n\n#-------------------------------------------------------------------------------------------------------\n\ndescribe Examenes::PreguntaSimple do\n  before :each do\n    @lista = Examenes::List.new\n  end\n\n  it \"Se debe poder recorrer la lista empezando desde la cabeza\" do\n    @lista.push(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n    expect(@lista.verDesdeCabeza).to eq('9 8 7 6 5 4 3 2 1 0 ')\n  end\n  \n  it \"Se debe poder recorrer la lista empezando desde la cola\" do\n    @lista.push(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n    expect(@lista.verDesdeCola).to eq('0 1 2 3 4 5 6 7 8 9 ')\n  end  \n\n  it \"La preguntas y sus respuestas deben coincidir\" do\n    @pregunta1 = Examenes::PreguntaSimple.new(\"¿Cual es el tipo del objeto en el siguiente c´odigo Ruby? /t class Objeto /t end\", [ 'a) Una instancia de la clase Class', 'b) Una constante', 'c) Un objeto', 'd) Ninguna de las anteriores' ])\n    @pregunta2 = Examenes::VerdaderoFalso.new(\"Es apropiado que una clase Tablero herede de una clase Juego.\")\n    @lista.push(@pregunta2,@pregunta1)\n    \n    expect(@lista.cabeza.value.pregunta).to eq(\"¿Cual es el tipo del objeto en el siguiente c´odigo Ruby? /t class Objeto /t end\")\n    expect(@lista.cabeza.value.obtenerRespuestas(0)).to eq('a) Una instancia de la clase Class')\n    expect(@lista.cabeza.value.obtenerRespuestas(1)).to eq('b) Una constante')\n    expect(@lista.cabeza.value.obtenerRespuestas(2)).to eq('c) Un objeto')\n    expect(@lista.cabeza.value.obtenerRespuestas(3)).to eq('d) Ninguna de las anteriores')\n\n    @lista.pop\n    expect(@lista.cabeza.value.pregunta).to eq(\"Es apropiado que una clase Tablero herede de una clase Juego.\")\n    expect(@lista.cabeza.value.obtenerRespuestas(0)).to eq('a) Cierto')\n    expect(@lista.cabeza.value.obtenerRespuestas(1)).to eq('b) Falso')\n  end\n  \n  \n  it \"Es pregunta1 hijo de el objeto examen\" do\n    @pregunta1 = Examenes::PreguntaSimple.new(\"¿Cual es el tipo del objeto en el siguiente c´odigo Ruby? /t class Objeto /t end\", [ 'a) Una instancia de la clase Class', 'b) Una constante', 'c) Un objeto', 'd) Ninguna de las anteriores' ])\n    @pregunta2 = Examenes::VerdaderoFalso.new(\"Es apropiado que una clase Tablero herede de una clase Juego.\")\n    \n    expect(@pregunta1).to be_instance_of Examenes::PreguntaSimple       #pregunta1 es instancia de Examen\n    expect(@pregunta2).to be_instance_of Examenes::VerdaderoFalso    #pregunta2 es instancia de Preguntas\n    \n    expect(@pregunta1).to be_a_kind_of Examenes::PreguntaSimple         #pregunta1 esta en la jeraquia de Examen\n    expect(@pregunta1).not_to be_a_kind_of Examenes::VerdaderoFalso  #pregunta1 no esta en la jerarquia de Examen\n    \n    expect(@pregunta2).to be_a_kind_of Examenes::PreguntaSimple        #pregunta2 esta en la jerarquia de Examen\n    expect(@pregunta2).to be_a_kind_of Examenes::VerdaderoFalso      #pregunta2 esta en la jerarquia de Preguntas\n\n  end\n  \nend\n\n\n\n\n#-------------------------------------------------------------------------------------------------------\n\ndescribe Examenes::PreguntaSimple do\n  before :each do\n    @pregunta1 = Examenes::VerdaderoFalso.new(\"Es apropiado que una clase Tablero herede de una clase Juego.\")\n    @pregunta2 = Examenes::PreguntaSimple.new(\"Es apropiado que una clase Tablero herede de una clase Juego.\", [\"a) Cierto\", \"b) Falso\"])\n    @pregunta3 = Examenes::PreguntaSimple.new(\"¿Cual es el tipo del objeto en el siguiente c´odigo Ruby? /t class Objeto /t end\", [ 'a) Una instancia de la clase Class', 'b) Una constante', 'c) Un objeto', 'd) Ninguna de las anteriores' ])\n\n  end\n  \n  it \"Verifica si los objetos son Comparable\" do\n    expect(@pregunta1).to be_a_kind_of Comparable \n    expect(@pregunta2).to be_a_kind_of Comparable   \n    expect(@pregunta3).to be_a_kind_of Comparable\n  end\n  \n  \n  it \"Verifica si los objetos son iguales\" do\n    expect(@pregunta1).to eq(@pregunta2)\n  end\n  \n  it \"Verifica si los objetos son diferentes\" do\n    expect(@pregunta1).not_to eq(@pregunta3)\n  end\n  \n    it \"Verifica si una pregunta es mayor que otra\" do\n    expect(@pregunta3).to be > (@pregunta2)\n  end\n  \n    it \"Verifica si una pregunta es menor que otra\" do\n    expect(@pregunta2).to be < (@pregunta3)\n  end\n  \nend\n  \n#------------------------------  \n\ndescribe Examenes::PreguntaSimple do\n  before :each do\n    @pregunta1 = Examenes::PreguntaSimple.new(\"¿Cual es la salida del siguiente codigo Ruby?/tclass Xyz/tdef pots/t@nice/tend/tend/txyz = Xyz.new/tp xyz.pots/t\" , [ 'a) #<Xyz:0xa000208>', 'b) nil', 'c) 0', 'd) Ninguna de las anteriores' ])\n    @pregunta2 = Examenes::PreguntaSimple.new(\"La siguiente definicion de un hash en Ruby es valida:/thash_raro = {/t[1, 2, 3] => Object.new(),/tHash.new => :toto/t}/t\" , [ 'a) Cierto', 'b) Falso'])\n    @pregunta3 = Examenes::PreguntaSimple.new('¿Cual es la salida del siguiente codigo Ruby?/tclass Array/tdef say_hi/t\"HEY!\"/t  end/t end/t /t p [1, \"bob\"].say_hi/t' , [ 'a) 1', 'b) bob', 'c) hey!' ,'d) Ninguna de las anteriores'])\n    @pregunta4 = Examenes::PreguntaSimple.new(\"¿Cual es el tipo del objeto en el siguiente codigo Ruby?/tclass Objeto/tend/t\" , [ 'a) Una instancia de la clase Class', 'b) Una constante', 'c) Un objeto' , 'd) Ninguna de las anteriores'])\n    @pregunta5 = Examenes::PreguntaSimple.new(\"Es apropiado que una clase Tablero herede de una clase Juego./t\" , [ 'a) Cierto', 'b) Falso'])\n\n    @lista = Examenes::List.new\n    @lista.push(@pregunta5,@pregunta4,@pregunta3,@pregunta2,@pregunta1)\n  end\n  \n\n  it \"La clase Lista es Enumerable\" do\n    expect(@lista).to be_a_kind_of Enumerable \n  end\n  \n  \n  it \"Cuenta el numero de elementos\" do\n    expect(@lista.count).to eq(5)\n    @lista.pop\n    expect(@lista.count).to eq(4)\n    @lista.pop\n    expect(@lista.count).to eq(3)\n  end\n  \n  it \"Se busca el maximo de la lista (la pregunta mas larga)\" do\n    expect(@lista.max).to eq(@pregunta2)\n  end\n  \n  it \"Se busca el minimo de la lista (la pregunta mas corta)\" do\n    expect(@lista.min).to eq(@pregunta5)\n  end\n  \n\nend\n\n#------------------------------  \n\ndescribe Examenes::PreguntaSimple do\n  before :each do\n    @pregunta1 = Examenes::VerdaderoFalso.new(\"Es apropiado que una clase Tablero herede de una clase Juego.\")\n    @pregunta2 = Examenes::PreguntaSimple.new('¿Cual es la salida del siguiente codigo Ruby?/tclass Array/tdef say_hi/t\"HEY!\"/t  end/t end/t /t p [1, \"bob\"].say_hi/t' , [ 'a) 1', 'b) bob', 'c) hey!' ,'d) Ninguna de las anteriores'])\n\n    @solucion1 = 'a'\n    @solucion2 = 'd'\n    \n    @lista_soluciones = Examenes::List.new\n    @lista_soluciones.push(@solucion1,@solucion2)\n\n    @lista_preguntas = Examenes::List.new\n    @lista_preguntas.push(@pregunta2,@pregunta1)\n    @examen = Examenes::ExamenCompleto.new(@lista_preguntas,@lista_soluciones)\n  end\n  \n  it \"Un examen contiene una lista de preguntas\" do\n    expect(@examen.obtenerPreguntas).to eq(@lista_preguntas)\n  end\n  \n  it \"Un examen contiene una lista de soluciones\" do\n    expect(@examen.obtenerSoluciones).to eq(@lista_soluciones)\n  end\nend\n\n#------------------------------  \n\ndescribe Examenes::PreguntaSimple do\n  before :each do\n    @pregunta1 = Examenes::VerdaderoFalso.new(\"Es apropiado que una clase Tablero herede de una clase Juego.\")\n    @pregunta2 = Examenes::PreguntaSimple.new('Cual es la salida del siguiente codigo Ruby?/tclass Array/tdef say_hi/t\"HEY!\"/t  end/t end/t /t p [1, \"bob\"].say_hi/t' , [ 'a) 1', 'b) bob', 'c) hey!' ,'d) Ninguna de las anteriores'])\n\n    @solucion1 = 'a'\n    @solucion2 = 'd'\n    \n    @lista_soluciones = Examenes::List.new\n    @lista_soluciones.push(@solucion2, @solucion1)\n\n    @lista_preguntas = Examenes::List.new\n    @lista_preguntas.push(@pregunta2, @pregunta1)\n    \n    @examen = Examenes::ExamenCompleto.new(@lista_preguntas, @lista_soluciones)\n    \n    @ui = Examenes::UI.new(@examen)\n  end\n  \n  \n  it \"Una UI tiene un metodo para mostrar preguntas y posibles respuestas\" do\n    expect(@ui.mostrarPregunta(1)).to eq(@examen.obtenerPregunta(1))\n    expect(@ui.mostrarPregunta(2)).to eq(@examen.obtenerPregunta(2))\n  end\n  \n  it \"Una UI tiene un metodo para recibir input del usuario\" do\n    expect(@ui.input(1,'d')).to eq(true)\n  end\n  \n  it \"Una UI compara la respuesta con la solucion\" do\n    expect(@ui.comparar(2,'d')).to eq(true)\n  end\n  \n  it \"Una UI almacena el numero de aciertos\" do\n    expect(@ui.aciertos).to eq(0)\n  end\n  \n  it \"Una UI compara aciertos con numero de preguntas y muestra nota final\" do\n    expect(@ui.nota).to eq(-1)\n  end\n  \n  it \"Una UI tiene un metodo para que un usuario realice un examen\" do\n    expect(@ui.examinar('a','d')).to eq(10)\n  end\n  \n    it \"Una UI tiene un metodo para que un usuario realice un examen\" do\n    expect(@ui.examinar('b','d')).to eq(5)\n  end\n  \nend\n\n\n#------------------------------  \n\ndescribe Examenes::PreguntaSimple do\n  before :each do\n    @lista_preguntas = Examenes::List.new\n    @lista_preguntas.push(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)  \n    \n    @lista_soluciones = Examenes::List.new\n    @lista_soluciones.push('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')\n    \n    @examen = Examenes::ExamenCompleto.new(@lista_preguntas, @lista_soluciones)\n    \n    @ui = Examenes::UI.new(@examen)\n  end\n  \n  it \"Se da la vuelta y se comprueba desde la cabeza\" do\n    expect(@ui.contenido.lista_preguntas.verDesdeCola).to eq(\"0 1 2 3 4 5 6 7 8 9 \")\n    expect(@ui.contenido.lista_soluciones.verDesdeCola).to eq(\"a b c d e f g h i j \")\n    @ui.invertir\n    expect(@ui.contenido.lista_preguntas.verDesdeCola).to eq(\"9 8 7 6 5 4 3 2 1 0 \")\n    expect(@ui.contenido.lista_soluciones.verDesdeCola).to eq(\"j i h g f e d c b a \")\n  end\n  \nend\n\n\n#---------------------- QUIZ\n\ndescribe Examenes::Quiz do\n\n      it \"Debe tener nombre\" do\n        exam = Examenes::Quiz.new\n        expect(exam.name).to be == \"Sin Nombre\"\n        exam.name = \"Examen\"\n        expect(exam.name).to be == \"Examen\"\n      end\n      \n      it \"Debe introducirse una pregunta\" do\n        exam = Examenes::Quiz.new\n        exam.add(:type => 1, :text => \"2+5=\", :right => [\"Ninguna de las anteriores\"], :distractor => [\"4\",\"5\",\"6\"])\n        expect(exam.show).to be == exam.name + \"2+5=\\n\\t4\\n\\t5\\n\\t6\\n\\tNinguna de las anteriores\\n\"\n      end\n\n      it \"Debe mostrarse el nombre del examen y las preguntas de forma ordenada\" do\n        exam = Examenes::Quiz.new\n        exam.add(:type => 1, :text => \"2+5=\", :right => [\"Ninguna de las anteriores\"], :distractor => [\"4\",\"5\",\"6\"])\n        exam.add(:type => 0, :text => 'Es apropiado que una clase Tablero herede de una clase Juego', :right => [\"FALSE\"])\n        expect(exam.show).to be == exam.name + \"2+5=\\n\\t4\\n\\t5\\n\\t6\\n\\tNinguna de las anteriores\\nEs apropiado que una clase Tablero herede de una clase Juego\\n\\tTRUE\\n\\tFALSE\\n\"\n      end\n\n      it \"Debe comprobar que las respuestas son correctas\" do\n        exam = Examenes::Quiz.new\n        exam.add(:type => 1, :text => \"2+5=\", :right => [\"Ninguna de las anteriores\"], :distractor => [\"4\",\"5\",\"6\"])\n        exam.add(:type => 0, :text => 'Es apropiado que una clase Tablero herede de una clase Juego', :right => [\"FALSE\"])\n        resp1 = [\"Ninguna de las anteriores\", \"FALSE\"]\n        expect(exam.check(resp1)).to be == [true,true]\n        resp2 = [\"Ninguna de las anteriores\", \"TRUE\"]\n        expect(exam.check(resp2)).to be == [true,false]\n        resp3 = [\"4\", \"FALSE\"]\n        expect(exam.check(resp3)).to be == [false,true]\n      end\n\n      it \"Debe mostrarse el nombre del examen y las preguntas en orden inverso\" do\n        exam = Examenes::Quiz.new\n        exam.add(:type => 1, :text => \"2+5=\", :right => [\"Ninguna de las anteriores\"], :distractor => [\"4\",\"5\",\"6\"])\n        exam.add(:type => 0, :text => 'Es apropiado que una clase Tablero herede de una clase Juego', :right => [\"FALSE\"])\n        expect(exam.show_i).to be == exam.name + \"Es apropiado que una clase Tablero herede de una clase Juego\\n\\tTRUE\\n\\tFALSE\\n2+5=\\n\\t4\\n\\t5\\n\\t6\\n\\tNinguna de las anteriores\\n\"\n      end\n\n      it \"Debe tener implementado un DSL\" do\n        exam = Examenes::Quiz.new(\"Cuestionario de LPP 05/12/2014\") {\n            question \"Cuantos argumentos de tipo bloque puede recibir un metodo?\",\n              right =>'1',\n              wrong =>'2',\n              wrong =>'muchos',\n              wrong =>'los que defina el usuatio'\n        \n            question \"En Ruby los bloque son objetos que continen codigo\",\n              right => 'FALSE'\n        }\n        \n          expect(exam.show).to be == exam.name +\n            \"Cuantos argumentos de tipo bloque puede recibir un metodo?\\n\"+\n            \"\\t1\\n\"+\n            \"\\t2\\n\"+\n            \"\\tmuchos\\n\"+\n            \"\\tlos que defina el usuario\\n\"+\n            \"En Ruby los bloque son objetos que continen codigo\\n\"+\n            \"\\tFALSE\\n\"+\n            \"\\tTRUE\\n\"\n      end\n\nend","undoManager":{"mark":101,"position":100,"stack":[[{"group":"doc","deltas":[{"start":{"row":434,"column":4},"end":{"row":434,"column":6},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":434,"column":6},"end":{"row":434,"column":8},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":434,"column":9},"end":{"row":435,"column":0},"action":"insert","lines":["",""]},{"start":{"row":435,"column":0},"end":{"row":435,"column":8},"action":"insert","lines":["        "]}]}],[{"group":"doc","deltas":[{"start":{"row":435,"column":8},"end":{"row":436,"column":0},"action":"insert","lines":["",""]},{"start":{"row":436,"column":0},"end":{"row":436,"column":8},"action":"insert","lines":["        "]}]}],[{"group":"doc","deltas":[{"start":{"row":437,"column":0},"end":{"row":437,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":437,"column":2},"end":{"row":437,"column":4},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":437,"column":4},"end":{"row":437,"column":6},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":436,"column":2},"end":{"row":436,"column":4},"action":"remove","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":436,"column":0},"end":{"row":436,"column":2},"action":"remove","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":435,"column":8},"end":{"row":436,"column":4},"action":"remove","lines":["","    "]}]}],[{"group":"doc","deltas":[{"start":{"row":437,"column":0},"end":{"row":437,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":437,"column":2},"end":{"row":437,"column":4},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":437,"column":4},"end":{"row":437,"column":6},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":437,"column":6},"end":{"row":437,"column":8},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":438,"column":0},"end":{"row":438,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":438,"column":2},"end":{"row":438,"column":4},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":438,"column":4},"end":{"row":438,"column":6},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":438,"column":6},"end":{"row":438,"column":8},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":439,"column":0},"end":{"row":439,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":439,"column":2},"end":{"row":439,"column":4},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":439,"column":4},"end":{"row":439,"column":6},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":439,"column":6},"end":{"row":439,"column":8},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":440,"column":0},"end":{"row":440,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":440,"column":2},"end":{"row":440,"column":4},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":440,"column":4},"end":{"row":440,"column":6},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":440,"column":6},"end":{"row":440,"column":8},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":441,"column":0},"end":{"row":441,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":441,"column":2},"end":{"row":441,"column":4},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":441,"column":4},"end":{"row":441,"column":6},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":441,"column":6},"end":{"row":441,"column":8},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":442,"column":0},"end":{"row":442,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":442,"column":2},"end":{"row":442,"column":4},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":442,"column":4},"end":{"row":442,"column":6},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":442,"column":6},"end":{"row":442,"column":8},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":443,"column":0},"end":{"row":443,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":443,"column":2},"end":{"row":443,"column":4},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":443,"column":4},"end":{"row":443,"column":6},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":443,"column":6},"end":{"row":443,"column":8},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":444,"column":0},"end":{"row":444,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":444,"column":2},"end":{"row":444,"column":4},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":444,"column":4},"end":{"row":444,"column":6},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":444,"column":6},"end":{"row":444,"column":8},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":446,"column":0},"end":{"row":446,"column":5},"action":"remove","lines":["#=end"]}]}],[{"group":"doc","deltas":[{"start":{"row":445,"column":0},"end":{"row":445,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":445,"column":2},"end":{"row":445,"column":4},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":445,"column":4},"end":{"row":445,"column":6},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":436,"column":6},"end":{"row":436,"column":8},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":436,"column":8},"end":{"row":436,"column":10},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":437,"column":7},"end":{"row":437,"column":8},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":437,"column":8},"end":{"row":437,"column":10},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":437,"column":10},"end":{"row":437,"column":11},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":437,"column":8},"end":{"row":437,"column":10},"action":"remove","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":437,"column":8},"end":{"row":437,"column":10},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":437,"column":10},"end":{"row":437,"column":12},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":438,"column":8},"end":{"row":438,"column":10},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":438,"column":10},"end":{"row":438,"column":12},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":439,"column":8},"end":{"row":439,"column":10},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":439,"column":10},"end":{"row":439,"column":12},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":440,"column":8},"end":{"row":440,"column":10},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":440,"column":10},"end":{"row":440,"column":12},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":441,"column":8},"end":{"row":441,"column":10},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":441,"column":10},"end":{"row":441,"column":12},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":442,"column":8},"end":{"row":442,"column":10},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":442,"column":10},"end":{"row":442,"column":12},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":443,"column":8},"end":{"row":443,"column":10},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":443,"column":10},"end":{"row":443,"column":12},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":444,"column":8},"end":{"row":444,"column":10},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":444,"column":10},"end":{"row":444,"column":12},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":383,"column":0},"end":{"row":384,"column":2},"action":"remove","lines":["  ","  "]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":9},"end":{"row":382,"column":16},"action":"remove","lines":["ExamGUI"]},{"start":{"row":382,"column":9},"end":{"row":382,"column":13},"action":"insert","lines":["Quiz"]}]}],[{"group":"doc","deltas":[{"start":{"row":385,"column":15},"end":{"row":385,"column":22},"action":"remove","lines":["ExamGUI"]},{"start":{"row":385,"column":15},"end":{"row":385,"column":19},"action":"insert","lines":["Quiz"]}]}],[{"group":"doc","deltas":[{"start":{"row":392,"column":15},"end":{"row":392,"column":22},"action":"remove","lines":["ExamGUI"]},{"start":{"row":392,"column":15},"end":{"row":392,"column":19},"action":"insert","lines":["Quiz"]}]}],[{"group":"doc","deltas":[{"start":{"row":398,"column":15},"end":{"row":398,"column":22},"action":"remove","lines":["ExamGUI"]},{"start":{"row":398,"column":15},"end":{"row":398,"column":19},"action":"insert","lines":["Quiz"]}]}],[{"group":"doc","deltas":[{"start":{"row":405,"column":15},"end":{"row":405,"column":22},"action":"remove","lines":["ExamGUI"]},{"start":{"row":405,"column":15},"end":{"row":405,"column":19},"action":"insert","lines":["Quiz"]}]}],[{"group":"doc","deltas":[{"start":{"row":417,"column":15},"end":{"row":417,"column":22},"action":"remove","lines":["ExamGUI"]},{"start":{"row":417,"column":15},"end":{"row":417,"column":19},"action":"insert","lines":["Quiz"]}]}],[{"group":"doc","deltas":[{"start":{"row":424,"column":15},"end":{"row":424,"column":22},"action":"remove","lines":["ExamGUI"]},{"start":{"row":424,"column":15},"end":{"row":424,"column":19},"action":"insert","lines":["Quiz"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":9},"end":{"row":382,"column":10},"action":"insert","lines":["E"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":10},"end":{"row":382,"column":11},"action":"insert","lines":["x"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":11},"end":{"row":382,"column":12},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":12},"end":{"row":382,"column":13},"action":"insert","lines":["m"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":13},"end":{"row":382,"column":14},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":14},"end":{"row":382,"column":15},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":15},"end":{"row":382,"column":16},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":16},"end":{"row":382,"column":17},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":17},"end":{"row":382,"column":18},"action":"insert","lines":[":"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":18},"end":{"row":382,"column":19},"action":"insert","lines":[":"]}]}],[{"group":"doc","deltas":[{"start":{"row":424,"column":15},"end":{"row":424,"column":16},"action":"insert","lines":["E"]}]}],[{"group":"doc","deltas":[{"start":{"row":424,"column":16},"end":{"row":424,"column":17},"action":"insert","lines":["x"]}]}],[{"group":"doc","deltas":[{"start":{"row":424,"column":17},"end":{"row":424,"column":18},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":424,"column":18},"end":{"row":424,"column":19},"action":"insert","lines":["m"]}]}],[{"group":"doc","deltas":[{"start":{"row":424,"column":19},"end":{"row":424,"column":20},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":424,"column":20},"end":{"row":424,"column":21},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":424,"column":21},"end":{"row":424,"column":22},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":424,"column":22},"end":{"row":424,"column":23},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":424,"column":23},"end":{"row":424,"column":24},"action":"insert","lines":[":"]}]}],[{"group":"doc","deltas":[{"start":{"row":424,"column":24},"end":{"row":424,"column":25},"action":"insert","lines":[":"]}]}],[{"group":"doc","deltas":[{"start":{"row":385,"column":15},"end":{"row":385,"column":25},"action":"insert","lines":["Examenes::"]}]}],[{"group":"doc","deltas":[{"start":{"row":392,"column":15},"end":{"row":392,"column":25},"action":"insert","lines":["Examenes::"]}]}],[{"group":"doc","deltas":[{"start":{"row":398,"column":15},"end":{"row":398,"column":25},"action":"insert","lines":["Examenes::"]}]}],[{"group":"doc","deltas":[{"start":{"row":405,"column":15},"end":{"row":405,"column":25},"action":"insert","lines":["Examenes::"]}]}],[{"group":"doc","deltas":[{"start":{"row":417,"column":15},"end":{"row":417,"column":25},"action":"insert","lines":["Examenes::"]}]}],[{"group":"doc","deltas":[{"start":{"row":380,"column":0},"end":{"row":446,"column":3},"action":"remove","lines":["#---------------------- QUIZ","","describe Examenes::Quiz do","","      it \"Debe tener nombre\" do","        exam = Examenes::Quiz.new","        expect(exam.name).to be == \"Sin Nombre\"","        exam.name = \"Examen\"","        expect(exam.name).to be == \"Examen\"","      end","      ","      it \"Debe introducirse una pregunta\" do","        exam = Examenes::Quiz.new","        exam.add(:type => 1, :text => \"2+5=\", :right => [\"Ninguna de las anteriores\"], :distractor => [\"4\",\"5\",\"6\"])","        expect(exam.show).to be == exam.name + \"2+5=\\n\\t4\\n\\t5\\n\\t6\\n\\tNinguna de las anteriores\\n\"","      end","","      it \"Debe mostrarse el nombre del examen y las preguntas de forma ordenada\" do","        exam = Examenes::Quiz.new","        exam.add(:type => 1, :text => \"2+5=\", :right => [\"Ninguna de las anteriores\"], :distractor => [\"4\",\"5\",\"6\"])","        exam.add(:type => 0, :text => 'Es apropiado que una clase Tablero herede de una clase Juego', :right => [\"FALSE\"])","        expect(exam.show).to be == exam.name + \"2+5=\\n\\t4\\n\\t5\\n\\t6\\n\\tNinguna de las anteriores\\nEs apropiado que una clase Tablero herede de una clase Juego\\n\\tTRUE\\n\\tFALSE\\n\"","      end","","      it \"Debe comprobar que las respuestas son correctas\" do","        exam = Examenes::Quiz.new","        exam.add(:type => 1, :text => \"2+5=\", :right => [\"Ninguna de las anteriores\"], :distractor => [\"4\",\"5\",\"6\"])","        exam.add(:type => 0, :text => 'Es apropiado que una clase Tablero herede de una clase Juego', :right => [\"FALSE\"])","        resp1 = [\"Ninguna de las anteriores\", \"FALSE\"]","        expect(exam.check(resp1)).to be == [true,true]","        resp2 = [\"Ninguna de las anteriores\", \"TRUE\"]","        expect(exam.check(resp2)).to be == [true,false]","        resp3 = [\"4\", \"FALSE\"]","        expect(exam.check(resp3)).to be == [false,true]","      end","","      it \"Debe mostrarse el nombre del examen y las preguntas en orden inverso\" do","        exam = Examenes::Quiz.new","        exam.add(:type => 1, :text => \"2+5=\", :right => [\"Ninguna de las anteriores\"], :distractor => [\"4\",\"5\",\"6\"])","        exam.add(:type => 0, :text => 'Es apropiado que una clase Tablero herede de una clase Juego', :right => [\"FALSE\"])","        expect(exam.show_i).to be == exam.name + \"Es apropiado que una clase Tablero herede de una clase Juego\\n\\tTRUE\\n\\tFALSE\\n2+5=\\n\\t4\\n\\t5\\n\\t6\\n\\tNinguna de las anteriores\\n\"","      end","","      it \"Debe tener implementado un DSL\" do","        exam = Examenes::Quiz.new(\"Cuestionario de LPP 05/12/2014\") {","            question \"Cuantos argumentos de tipo bloque puede recibir un metodo?\",","              right =>'1',","              wrong =>'2',","              wrong =>'muchos',","              wrong =>'los que defina el usuatio'","        ","            question \"En Ruby los bloque son objetos que continen codigo\",","              right => 'FALSE'","        }","        ","          expect(exam.show).to be == exam.name +","            \"Cuantos argumentos de tipo bloque puede recibir un metodo?\\n\"+","            \"\\t1\\n\"+","            \"\\t2\\n\"+","            \"\\tmuchos\\n\"+","            \"\\tlos que defina el usuario\\n\"+","            \"En Ruby los bloque son objetos que continen codigo\\n\"+","            \"\\tFALSE\\n\"+","            \"\\tTRUE\\n\"","      end","","end"]}]}]]},"ace":{"folds":[],"scrolltop":8656.5,"scrollleft":0,"selection":{"start":{"row":446,"column":3},"end":{"row":446,"column":3},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1418263051718}